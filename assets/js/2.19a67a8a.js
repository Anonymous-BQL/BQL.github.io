(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{52:function(e,t,r){"use strict";r.r(t);var a=r(0),o=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[r("h2",{attrs:{id:"spring-mvc管控流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc管控流程","aria-hidden":"true"}},[e._v("#")]),e._v(" Spring MVC管控流程")]),r("p",[r("em",[e._v("请求经过的流程")])]),r("h3",{attrs:{id:"_1-filter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-filter","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.Filter")]),r("p",[r("em",[e._v("基于servlet filter的内建filter")])]),r("h3",{attrs:{id:"_2-handlemapping"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-handlemapping","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.HandleMapping")]),r("p",[r("em",[e._v("根据策略调用不同的 handlemapping 来映射请求获取请求相关的 controller 和 intercepter")])]),r("h3",{attrs:{id:"_3-intercepter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-intercepter","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.Intercepter")]),r("p",[r("em",[e._v("HandlerIntercepter，拦截指定 URL 或者 controller 的请求，进行处理")])]),r("h3",{attrs:{id:"_4-before-controller"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-before-controller","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.before controller")]),r("blockquote",[r("ul",[r("li",[e._v("如果是 ViewController，则调用相应的 viewcontroller 进行处理")])])]),r("blockquote",[r("ul",[r("li",[e._v("如果是 method controller：")])])]),r("blockquote",[r("blockquote",[r("ol",[r("li",[e._v("调用 MessageConverter 转换HTTP body数据")])])])]),r("blockquote",[r("blockquote",[r("ol",{attrs:{start:"2"}},[r("li",[e._v("Converters 转换HTTP header，url数据")])])])]),r("blockquote",[r("blockquote",[r("ol",{attrs:{start:"3"}},[r("li",[e._v("调用InitBind，进行请求数据到model的绑定")])])])]),r("blockquote",[r("blockquote",[r("ol",{attrs:{start:"4"}},[r("li",[e._v("将数据转换为 controller 参数")])])])]),r("blockquote",[r("blockquote",[r("ol",{attrs:{start:"4"}},[r("li",[e._v("调用 validation 进行参数验证")])])])]),r("blockquote",[r("blockquote",[r("ol",{attrs:{start:"5"}},[r("li",[e._v("若转换出现异常，则将异常保存到Errors中")])])])]),r("blockquote",[r("ul",[r("li",[e._v("如果是静态资源：")])])]),r("blockquote",[r("blockquote",[r("ol",[r("li",[e._v("若资源存在，则返回资源")])])])]),r("blockquote",[r("blockquote",[r("ol",{attrs:{start:"2"}},[r("li",[e._v("资源不存在且配置了 defaultServlet 则调用容器的 defaultServlet 进行处理")])])])]),r("h3",{attrs:{id:"_5-controller"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-controller","aria-hidden":"true"}},[e._v("#")]),e._v(" 5.Controller")]),r("blockquote",[r("p",[e._v("1.进行请求相应，可以返回和接受任意类型，通过不通过类型参数可以得到需要的数据对象")])]),r("blockquote",[r("p",[e._v("2.调用相应的 ControllerAdvice 进行处理")])]),r("blockquote",[r("p",[e._v("3.若处理出现异常，则调用 HandlerExceptionResolver Bean 或者 @ExceptionHandler 方法，当使用 Rest时 可以使用全局的 ResponseEntityExceptionHandler Bean")])]),r("blockquote",[r("p",[e._v("4.出现异常时，Spring会根据异常的类型对Response status 进行注入")])]),r("h3",{attrs:{id:"_6-translator"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-translator","aria-hidden":"true"}},[e._v("#")]),e._v(" 6.Translator")]),r("p",[r("em",[e._v("如果需要返回视图，Translator 翻译 Controller 的返回值，不同返回值可能拥有不同的 Translator")])]),r("h3",{attrs:{id:"_7-viewresolvers"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-viewresolvers","aria-hidden":"true"}},[e._v("#")]),e._v(" 7.ViewResolvers")]),r("p",[r("em",[e._v("在 Translator 之后进行处理，也可能在 ContentNegotiatingViewConverter之后处理，需要时，返回视图")])]),r("h3",{attrs:{id:"_8-response"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-response","aria-hidden":"true"}},[e._v("#")]),e._v(" 8.Response")]),r("p",[r("em",[e._v("经过该请求所对应的所有的 MessageConverters, Intercepter, Filter，并响应客户端")])]),r("h2",{attrs:{id:"相关问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#相关问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 相关问题")]),r("blockquote",[r("ul",[r("li",[e._v("多个 Handlermapping 与多个 ViewResolver，通过 order 属性指定优先级，或者通过\nContentNegotiatingViewConverter 根据客户端Accept类型进行选择")])])])])}],!1,null,null,null);t.default=o.exports}}]);