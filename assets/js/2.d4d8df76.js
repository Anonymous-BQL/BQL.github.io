(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{52:function(t,e,a){"use strict";a.r(e);var r=a(0),i=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"spring-jpa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-jpa","aria-hidden":"true"}},[t._v("#")]),t._v(" Spring JPA")]),a("p",[a("em",[t._v("Jpa 依赖于 EntityManagerFactory 和 TransactionManager")])]),a("h3",{attrs:{id:"jpa-注解命名规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jpa-注解命名规则","aria-hidden":"true"}},[t._v("#")]),t._v(" Jpa 注解命名规则")]),a("blockquote",[a("p",[t._v("@Named* 注解与实体类，声明一个策略，与 Jpa repository 中@* 或 规范的方法命名 结合使用")])]),a("blockquote",[a("p",[t._v('eg: @NamedQuery(name = "User.findByEmailAddress", query = "select u from User u where u.emailAddress = ?1") 与 repository 中的 findByEmailAddress 方法')])]),a("blockquote",[a("p",[t._v('@NamedEntityGraph(name = "GroupInfo.detail", attributeNodes = @NamedAttributeNode("members")) 与 @EntityGraph(value = "GroupInfo.detail", type = EntityGraphType.LOAD)')])]),a("h3",{attrs:{id:"jpa-执行策略优先级顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jpa-执行策略优先级顺序","aria-hidden":"true"}},[t._v("#")]),t._v(" Jpa 执行策略优先级顺序")]),a("blockquote",[a("ol",[a("li",[t._v("@Query注解")])])]),a("blockquote",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("注解与实体类的@NamedQuery注解")])])]),a("blockquote",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("符合规范的方法命名")])])]),a("h3",{attrs:{id:"jpa-projection-映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jpa-projection-映射","aria-hidden":"true"}},[t._v("#")]),t._v(" Jpa projection 映射")]),a("blockquote",[a("ol",[a("li",[t._v("使用接口将实体类的属性映射为特定接口的方法(可以递归)")])])]),a("blockquote",[a("blockquote",[a("p",[a("code",[t._v('interface PersonSummary {   String getFirstname();   String getLastname();   AddressSummary getAddress();   interface AddressSummary {   String getCity();   } } interface NamesOnly {   @Value("#{target.firstname + \' \' + target.lastname}")   String getFullName();   … } interface NamesOnly {   String getFirstname();   String getLastname();   default String getFullName() {   return getFirstname.concat(" ").concat(getLastname());   } }')])])])]),a("blockquote",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("使用类将实体类的属性映射为特定类属性")])])]),a("blockquote",[a("blockquote",[a("p",[t._v("可以结合 DTO 使用")])])]),a("h3",{attrs:{id:"spring-transaction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-transaction","aria-hidden":"true"}},[t._v("#")]),t._v(" Spring transaction")]),a("blockquote",[a("p",[t._v("尽量使用 @Transactional 的 readOnly属性，当使用 hibernate 的 entityManager 时会进行优化(避免刷新脏数据操作)")])]),a("h3",{attrs:{id:"使用-auditing-审计数据更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-auditing-审计数据更新","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用 Auditing 审计数据更新")]),a("blockquote",[a("ol",[a("li",[t._v("用@CreatedBy @LastModifiedBy @CreatedDate @LastModifiedDate 注解实体字段，记录更新信息.")])])]),a("blockquote",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("注册类型为 AuditorAware 的bean实现 getCurrentAuditor 方法，以获取当前用户.")])])]),a("blockquote",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("在实体类上注解 @EntityListeners(AuditingEntityListener.class) 实现更新时审计.")])])])])}],!1,null,null,null);e.default=i.exports}}]);